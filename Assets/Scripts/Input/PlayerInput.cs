//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Racing"",
            ""id"": ""590ff9c1-f61b-43d6-bf73-7df2251ee166"",
            ""actions"": [
                {
                    ""name"": ""Accelarator"",
                    ""type"": ""Value"",
                    ""id"": ""9680ccf3-25fe-4b15-954d-997ac7d93cc5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Barke"",
                    ""type"": ""Value"",
                    ""id"": ""b33ddde0-0b33-40f9-9f64-abf3fb3813e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""2ca70ec7-04d1-4ae6-a760-9907f32ba079"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PowerDrift"",
                    ""type"": ""Button"",
                    ""id"": ""177b6eeb-43d2-4706-9947-a49191808ea5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Value"",
                    ""id"": ""c2561b92-2342-4b8a-9afa-ff69affdd326"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reverse"",
                    ""type"": ""Button"",
                    ""id"": ""f2563bce-f5d6-4128-bc98-829e91a10744"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0ef16fa-c057-4d6e-b698-c0cae93c778a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelarator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8256fb86-8bdb-4aec-9a65-ece7dfdb99cb"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Barke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acc43ff0-8ebc-4b19-bac7-2b8f902952b7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5e6177c-846a-4532-a5e8-be4652b9ed65"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PowerDrift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92ff1f83-0753-49ff-a764-b2c2747713f0"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68204b67-0544-495d-8b4a-789e846b4e5e"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Radio"",
            ""id"": ""c6e676de-0c3b-4f5c-bf31-073f01c93623"",
            ""actions"": [
                {
                    ""name"": ""Next Station"",
                    ""type"": ""Button"",
                    ""id"": ""c361516d-af5b-443d-ac67-24f453fb27ca"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previus Station"",
                    ""type"": ""Button"",
                    ""id"": ""a4f97e66-ffff-475f-9627-dcdd426374ee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3dc967d1-0d71-4da9-9b88-cbff5f00dd64"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Station"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ad7a6df-1b3c-4cba-a5c0-925f20164980"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previus Station"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""04669d72-36ac-4352-9a1e-be48a47a77dd"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""717fbbcc-8b60-4ac2-b63d-d49ddc5eca85"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f64c9ed2-2671-4b91-9ef1-11f363e06bc7"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Racing
        m_Racing = asset.FindActionMap("Racing", throwIfNotFound: true);
        m_Racing_Accelarator = m_Racing.FindAction("Accelarator", throwIfNotFound: true);
        m_Racing_Barke = m_Racing.FindAction("Barke", throwIfNotFound: true);
        m_Racing_Steering = m_Racing.FindAction("Steering", throwIfNotFound: true);
        m_Racing_PowerDrift = m_Racing.FindAction("PowerDrift", throwIfNotFound: true);
        m_Racing_MoveCamera = m_Racing.FindAction("MoveCamera", throwIfNotFound: true);
        m_Racing_Reverse = m_Racing.FindAction("Reverse", throwIfNotFound: true);
        // Radio
        m_Radio = asset.FindActionMap("Radio", throwIfNotFound: true);
        m_Radio_NextStation = m_Radio.FindAction("Next Station", throwIfNotFound: true);
        m_Radio_PreviusStation = m_Radio.FindAction("Previus Station", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Pause = m_UI.FindAction("Pause", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Racing.enabled, "This will cause a leak and performance issues, PlayerInput.Racing.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Radio.enabled, "This will cause a leak and performance issues, PlayerInput.Radio.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, PlayerInput.UI.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Racing
    private readonly InputActionMap m_Racing;
    private List<IRacingActions> m_RacingActionsCallbackInterfaces = new List<IRacingActions>();
    private readonly InputAction m_Racing_Accelarator;
    private readonly InputAction m_Racing_Barke;
    private readonly InputAction m_Racing_Steering;
    private readonly InputAction m_Racing_PowerDrift;
    private readonly InputAction m_Racing_MoveCamera;
    private readonly InputAction m_Racing_Reverse;
    public struct RacingActions
    {
        private @PlayerInput m_Wrapper;
        public RacingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelarator => m_Wrapper.m_Racing_Accelarator;
        public InputAction @Barke => m_Wrapper.m_Racing_Barke;
        public InputAction @Steering => m_Wrapper.m_Racing_Steering;
        public InputAction @PowerDrift => m_Wrapper.m_Racing_PowerDrift;
        public InputAction @MoveCamera => m_Wrapper.m_Racing_MoveCamera;
        public InputAction @Reverse => m_Wrapper.m_Racing_Reverse;
        public InputActionMap Get() { return m_Wrapper.m_Racing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RacingActions set) { return set.Get(); }
        public void AddCallbacks(IRacingActions instance)
        {
            if (instance == null || m_Wrapper.m_RacingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RacingActionsCallbackInterfaces.Add(instance);
            @Accelarator.started += instance.OnAccelarator;
            @Accelarator.performed += instance.OnAccelarator;
            @Accelarator.canceled += instance.OnAccelarator;
            @Barke.started += instance.OnBarke;
            @Barke.performed += instance.OnBarke;
            @Barke.canceled += instance.OnBarke;
            @Steering.started += instance.OnSteering;
            @Steering.performed += instance.OnSteering;
            @Steering.canceled += instance.OnSteering;
            @PowerDrift.started += instance.OnPowerDrift;
            @PowerDrift.performed += instance.OnPowerDrift;
            @PowerDrift.canceled += instance.OnPowerDrift;
            @MoveCamera.started += instance.OnMoveCamera;
            @MoveCamera.performed += instance.OnMoveCamera;
            @MoveCamera.canceled += instance.OnMoveCamera;
            @Reverse.started += instance.OnReverse;
            @Reverse.performed += instance.OnReverse;
            @Reverse.canceled += instance.OnReverse;
        }

        private void UnregisterCallbacks(IRacingActions instance)
        {
            @Accelarator.started -= instance.OnAccelarator;
            @Accelarator.performed -= instance.OnAccelarator;
            @Accelarator.canceled -= instance.OnAccelarator;
            @Barke.started -= instance.OnBarke;
            @Barke.performed -= instance.OnBarke;
            @Barke.canceled -= instance.OnBarke;
            @Steering.started -= instance.OnSteering;
            @Steering.performed -= instance.OnSteering;
            @Steering.canceled -= instance.OnSteering;
            @PowerDrift.started -= instance.OnPowerDrift;
            @PowerDrift.performed -= instance.OnPowerDrift;
            @PowerDrift.canceled -= instance.OnPowerDrift;
            @MoveCamera.started -= instance.OnMoveCamera;
            @MoveCamera.performed -= instance.OnMoveCamera;
            @MoveCamera.canceled -= instance.OnMoveCamera;
            @Reverse.started -= instance.OnReverse;
            @Reverse.performed -= instance.OnReverse;
            @Reverse.canceled -= instance.OnReverse;
        }

        public void RemoveCallbacks(IRacingActions instance)
        {
            if (m_Wrapper.m_RacingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRacingActions instance)
        {
            foreach (var item in m_Wrapper.m_RacingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RacingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RacingActions @Racing => new RacingActions(this);

    // Radio
    private readonly InputActionMap m_Radio;
    private List<IRadioActions> m_RadioActionsCallbackInterfaces = new List<IRadioActions>();
    private readonly InputAction m_Radio_NextStation;
    private readonly InputAction m_Radio_PreviusStation;
    public struct RadioActions
    {
        private @PlayerInput m_Wrapper;
        public RadioActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextStation => m_Wrapper.m_Radio_NextStation;
        public InputAction @PreviusStation => m_Wrapper.m_Radio_PreviusStation;
        public InputActionMap Get() { return m_Wrapper.m_Radio; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RadioActions set) { return set.Get(); }
        public void AddCallbacks(IRadioActions instance)
        {
            if (instance == null || m_Wrapper.m_RadioActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RadioActionsCallbackInterfaces.Add(instance);
            @NextStation.started += instance.OnNextStation;
            @NextStation.performed += instance.OnNextStation;
            @NextStation.canceled += instance.OnNextStation;
            @PreviusStation.started += instance.OnPreviusStation;
            @PreviusStation.performed += instance.OnPreviusStation;
            @PreviusStation.canceled += instance.OnPreviusStation;
        }

        private void UnregisterCallbacks(IRadioActions instance)
        {
            @NextStation.started -= instance.OnNextStation;
            @NextStation.performed -= instance.OnNextStation;
            @NextStation.canceled -= instance.OnNextStation;
            @PreviusStation.started -= instance.OnPreviusStation;
            @PreviusStation.performed -= instance.OnPreviusStation;
            @PreviusStation.canceled -= instance.OnPreviusStation;
        }

        public void RemoveCallbacks(IRadioActions instance)
        {
            if (m_Wrapper.m_RadioActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRadioActions instance)
        {
            foreach (var item in m_Wrapper.m_RadioActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RadioActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RadioActions @Radio => new RadioActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Pause;
    public struct UIActions
    {
        private @PlayerInput m_Wrapper;
        public UIActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_UI_Pause;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IRacingActions
    {
        void OnAccelarator(InputAction.CallbackContext context);
        void OnBarke(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
        void OnPowerDrift(InputAction.CallbackContext context);
        void OnMoveCamera(InputAction.CallbackContext context);
        void OnReverse(InputAction.CallbackContext context);
    }
    public interface IRadioActions
    {
        void OnNextStation(InputAction.CallbackContext context);
        void OnPreviusStation(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
